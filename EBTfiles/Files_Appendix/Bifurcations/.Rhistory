for(i in 1:length(EndCoh)) {
Name = paste("Day_", BirthTimes[i], sep = "")
NewData <- data.frame(
BirthDay = BirthTimes[i],
Time = InPutData$Time[StartCoh[i] : (EndCoh[i] - 1)],
Length = InPutData[c(StartCoh[i] : (EndCoh[i] - 1)), LengthIn[j]],
Density = InPutData[c(StartCoh[i] : (EndCoh[i] - 1)), LengthIn[j] + 1],
Tot_Buffer = InPutData[c(StartCoh[i] : (EndCoh[i] - 1)), LengthIn[j] + 2])
if (Var == 4) {
NewData$CurrentBuf = InPutData[c(StartCoh[i] : (EndCoh[i] - 1)), LengthIn[j] + 3]
}
NewData$Age <- NewData$Time - BirthTimes[i]
NewData$Age_dietshift = subset(NewData, Length >= Size_shift)$Age[1]
NewData$Age_mat = subset(NewData, Length >= Size_mat)$Age[1]
#Calculate expected survival probability in the absence of starvation#
Mort_part = subset(NewData, Length >= mort_smin & Length <= mort_smax)
if(nrow(Mort_part) < 1) {
index_mort_start = index_mort_end = 0
} else {
index_mort_start = as.numeric(rownames(Mort_part)[1])
index_mort_end = as.numeric(rownames(Mort_part)[nrow(Mort_part)])
}
age_dif = NewData$Age[2] - NewData$Age[1]
NewData$Expected_surv = 1
if(nrow(NewData) > 1) {
for(k in 2:nrow(NewData)) {
if (k >=index_mort_start & k <= index_mort_end) {
mu = sizemort + background_mort
} else {
mu = background_mort
}
NewData$Expected_surv[k] = exp(-age_dif * mu) * NewData$Expected_surv[k - 1]
}
}
#End of calculation#
NewData$Density_scaled = NewData$Density/NewData$Density[1]
#R0 = probability to survive (=NewData$Density_scaled) * PER CAPITA repro (=NewData$Tot_Buffer/NewData$Density * egg surv * egg eff)
NewData$R0 <- (1 / StartSize) * (eggeff) * (1 - eggmort) * NewData$Density_scaled * NewData$Tot_Buffer/NewData$Density #times survival
PopList[[Name]] <- NewData
}
}
if ((length(EndCoh) == 0) & (length(StartCoh) == 1)) { #If a cohort starts, but doesn't die before end of simulation
Name = paste("Day_", BirthTimes[i], sep = "")
#Get last one
NewData <- data.frame(
BirthDay = BirthTimes[i],
Time = InPutData$Time[StartCoh[i]: nrow(InPutData)],
Length = InPutData[c(StartCoh[i] : nrow(InPutData)), LengthIn[j]],
Density = InPutData[c(StartCoh[i] : nrow(InPutData)), LengthIn[j] + 1],
Tot_Buffer = InPutData[c(StartCoh[i] : nrow(InPutData)), LengthIn[j] + 2])
if (Var == 4) {
NewData$CurrentBuf = InPutData[c(StartCoh[i] : nrow(InPutData)), LengthIn[j] + 3]
}
NewData$Age <- NewData$Time - BirthTimes[i]
NewData$Age_dietshift = subset(NewData, Length >= Size_shift)$Age[1]
NewData$Age_mat = subset(NewData, Length >= Size_mat)$Age[1]
#Calculate expected survival probability in the absence of starvation#
Mort_part = subset(NewData, Length >= mort_smin & Length <= mort_smax)
if(nrow(Mort_part) < 1) {
index_mort_start = index_mort_end = 0
} else {
index_mort_start = as.numeric(rownames(Mort_part)[1])
index_mort_end = as.numeric(rownames(Mort_part)[nrow(Mort_part)])
}
age_dif = NewData$Age[2] - NewData$Age[1]
NewData$Expected_surv = 1
if(nrow(NewData) > 1) {
for(k in 2:nrow(NewData)) {
if (k >=index_mort_start & k <= index_mort_end) {
mu = sizemort + background_mort
} else {
mu = background_mort
}
NewData$Expected_surv[k] = exp(-age_dif * mu) * NewData$Expected_surv[k - 1]
}
}
#End of calculation#
NewData$Density_scaled = NewData$Density/NewData$Density[1]
NewData$R0 <- (1 / StartSize) * (eggeff) * (1 - eggmort) * NewData$Density_scaled * NewData$Tot_Buffer/NewData$Density
PopList[[Name]] <- NewData }
if((length(StartCoh) > length(EndCoh)) & (length(StartCoh) > 1)) { #The last cohort in the set/
i = i + 1
Name = paste("Day_", BirthTimes[i], sep = "")
#Get last one
NewData <- data.frame(
BirthDay = BirthTimes[i],
Time = InPutData$Time[StartCoh[i]: nrow(InPutData)],
Length = InPutData[c(StartCoh[i] : nrow(InPutData)), LengthIn[j]],
Density = InPutData[c(StartCoh[i] : nrow(InPutData)), LengthIn[j] + 1],
Tot_Buffer = InPutData[c(StartCoh[i] : nrow(InPutData)), LengthIn[j] + 2])
if( Var == 4) {
NewData$CurrentBuf = InPutData[c(StartCoh[i] : nrow(InPutData)), LengthIn[j] + 3]
}
NewData$Age <- NewData$Time - BirthTimes[i]
NewData$Age_dietshift = subset(NewData, Length >= Size_shift)$Age[1]
NewData$Age_mat = subset(NewData, Length >= Size_mat)$Age[1]
#Calculate expected survival probability in the absence of starvation#
Mort_part = subset(NewData, Length >= mort_smin & Length <= mort_smax)
if(nrow(Mort_part) < 1) {
index_mort_start = index_mort_end = 0
} else {
index_mort_start = as.numeric(rownames(Mort_part)[1])
index_mort_end = as.numeric(rownames(Mort_part)[nrow(Mort_part)])
}
age_dif = NewData$Age[2] - NewData$Age[1]
NewData$Expected_surv = 1
if(nrow(NewData) > 1) {
for(k in 2:nrow(NewData)) {
if (k >=index_mort_start & k <= index_mort_end) {
mu = sizemort + background_mort
} else {
mu = background_mort
}
NewData$Expected_surv[k] = exp(-age_dif * mu) * NewData$Expected_surv[k - 1]
}
}
#End of calculation#
NewData$Density_scaled = NewData$Density/NewData$Density[1]
NewData$R0 <- (1 / StartSize) * (eggeff) * (1 - eggmort) * NewData$Density_scaled * NewData$Tot_Buffer/NewData$Density
PopList[[Name]] <- NewData }
}
PopList <- PopList[order(as.integer(gsub("[^0-9]","",names(PopList))))]
assign(OutPutData, PopList, envir = .GlobalEnv) ##save data globally
}
####Function to plot growth curves ####
PlotGrowth <- function(filename){
###Settings and load data####
CohNr_spec = 20 #Nr of cohorts in output #CHANGE IN .H FILE!!!!
SB = 0.351 #Size at birth
Varnr = 3 #3 output variables per cohort
minmortsize = 0.351 #Min size-specific mort
maxmortsize = 100 #Max size-specific mort
Missing_value = 1E308
mu_b = 0.001
Season = 250
SB = 0.351
Sad = 200
Sshift = 100
Egg_prod = 0.5 * (1 - 0.97)
sigma = 0.3
attack = 26.5
handling = 12.5
maintenance = 0.015
setwd('U:\\Manuscript\\Timeseries') #CHANGE!!!
# filename <- "HighQ_HighR1max.out" #CHANGE!!!!
GetData <- read.table(filename, header = F)
GetData <- GiveNames(GetData, maxcohorts = CohNr_spec)
indexStart = which(colnames(GetData) == 'LCoh_1') #Get pop data
indexEnd = indexStart + CohNr_spec * Varnr - 1
PopData <-  GetData[, c(1, indexStart:indexEnd)]
TimeData <- GetData[, -c(indexStart:indexEnd)]
GetPopData(InPutData = PopData, OutPutData = "PopList",
CohNr = CohNr_spec,
InitColNr = which(colnames(PopData) == 'LCoh_1'),
Var = Varnr, StartSize = SB,
NoData = 1E10,
mort_smin = minmortsize,
mort_smax = maxmortsize,
sizemort = 0)
######Calculate average growth rate per size-class#####
TotPops = 17 #I want the data for 17 populations (THIS IS THE PERIOD!) #YOU MIGHT NEED TO CHANGE!!!
AllPopData = data.frame()
###Get all growth rate data from the pop
for(j in 1:TotPops) {
Pop = PopList[[j]]
#calculate mortality rate
for(k in 1:(nrow(Pop) - 1)) {
Pop$MortRate[k] = log(Pop$Density[k]/Pop$Density[k + 1])
}
Pop$MortRate[nrow(Pop)] = Pop$MortRate[nrow(Pop) - 1]
#Calculate density at diet shift#
if(is.na(Pop$Age_dietshift[1])) {
Pop$Density_diet = NA
} else {
Pop$Density_diet = Pop[Pop$Age == Pop$Age_dietshift,]$Density
}
#Get the index at maturation#
if(is.na(Pop$Age_mat[1])) {
matindex = nrow(Pop)
} else {
matindex = which.min(abs(Pop$Age - Pop$Age_mat))
}
Pop$GrowthRate = NA
#Get growth rate before maturation (no growth after maturation!)
for(k in 1:(matindex - 1)) {
Pop$GrowthRate[k] = log(Pop$Length[k+1]/Pop$Length[k])
}
Pop$GrowthRate[matindex] = Pop$GrowthRate[matindex - 1]
##if cohortdata available before diet shift only:
if(is.na(Pop$Age_dietshift[1])) {
Pop$MeanLMort = mean(Pop$MortRate)
Pop$MeanJMort = NA
Pop$MeanLGrowth = mean(Pop$GrowthRate, na.rm = T)
Pop$MeanJGrowth = NA
} else if(is.na(Pop$Age_mat[1])) { #If cohortdata is available after diet shift but before maturation
Pop$MeanLMort = mean(subset(Pop, Age < Age_dietshift)$MortRate)
Pop$MeanJMort = mean(subset(Pop, Age >= Age_dietshift)$MortRate)
Pop$MeanLGrowth = mean(subset(Pop, Age < Age_dietshift)$GrowthRate, na.rm = T)
Pop$MeanJGrowth = mean(subset(Pop, Age >= Age_dietshift)$GrowthRate, na.rm = T)
} else {
Pop$MeanLMort = mean(subset(Pop, Age < Age_dietshift)$MortRate)
Pop$MeanJMort = mean(subset(Pop, Age >= Age_dietshift)$MortRate)
Pop$MeanLGrowth = mean(subset(Pop, Age < Age_dietshift)$GrowthRate, na.rm = T)
Pop$MeanJGrowth = mean(subset(Pop, Age >= Age_dietshift & Age <= Age_mat)$GrowthRate, na.rm = T)
}
AllPopData = rbind(AllPopData, Pop)
}
####Get curves of interest#####
UniquePop = subset(AllPopData, Age == 0) ##Get one entry per pop
UniquePop$MeanLGrowth_scaled = UniquePop$MeanLGrowth * UniquePop$Density #Scale growth with density#
UniquePop$MeanJGrowth_scaled = UniquePop$MeanJGrowth * UniquePop$Density_diet #Scale growth with density#
MeanGrowthL_index = UniquePop  %>%
summarize(MeanGrowth_scaled2 = sum(MeanLGrowth_scaled) / sum(Density),
IndexAVG = which.min(abs(MeanLGrowth - MeanGrowth_scaled2)),
AVGGrowth = MeanLGrowth[IndexAVG],
Birthday_AVG = BirthDay[IndexAVG],
IndexMin = which.min(MeanLGrowth),
MinGrowth = MeanLGrowth[IndexMin],
Birthday_min = BirthDay[IndexMin],
IndexMax = which.max(MeanLGrowth),
MaxGrowth = MeanLGrowth[IndexMax],
Birthday_max = BirthDay[IndexMax])
MeanGrowthL_index
MeanGrowthJ_index = UniquePop  %>%
summarize(MeanGrowth_scaled2 = sum(MeanJGrowth_scaled) / sum(Density_diet),
IndexAVG = which.min(abs(MeanJGrowth - MeanGrowth_scaled2)),
AVGGrowth = MeanJGrowth[IndexAVG],
Birthday_AVG = BirthDay[IndexAVG],
IndexMin = which.min(MeanLGrowth),
MinGrowth = MeanJGrowth[IndexMin],
Birthday_min = BirthDay[IndexMin],
IndexMax = which.max(MeanLGrowth),
MaxGrowth = MeanJGrowth[IndexMax],
Birthday_max = BirthDay[IndexMax])
MeanGrowthJ_index
###Plot####
subset_AllPopDataL_minmax <- AllPopData %>%
filter(BirthDay == MeanGrowthL_index$Birthday_max | BirthDay == MeanGrowthL_index$Birthday_min)
subset_AllPopDataL <- AllPopData %>%
filter(BirthDay == MeanGrowthL_index$Birthday_AVG)
GrowthCurves_Juv = ggplot(data = subset(subset_AllPopDataL,
Length < (100-1E-9)),
aes(x = (Age) / 250, y = Length,
group = BirthDay)) +
geom_path(alpha = .5, size = 2) +
geom_path(data = subset(subset_AllPopDataL_minmax,
Length < (100-1E-9)), alpha = 0.3, size = 1) +
xlab(expression(atop("", atop("Time (years)", "")))) +
ylab("Size (g)") +
theme(legend.position = 'none',
axis.title.y = element_text(size = 14, colour = 'black'),
axis.title.x = element_text(size = 20, colour = 'black'),
axis.text=element_text(size=11, colour = 'black'),
plot.margin = margin(10, 5, 0, 5.5, "pt"),
legend.background = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
NULL
GrowthCurves_Juv
}
# Plot growth curves for different par values in Result 2
NoMortFocal_growth <- PlotGrowth("HighQ_noMort.out")
#NoMortFocal_growth
InterMortFocal_growth <- PlotGrowth("HighQ_InterMort.out")
ggarrange(MortTimePlotHighQ +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
plot.margin = unit(c(0,1,0,0), 'lines')),
NoMortFocal_growth + theme(plot.margin = unit(c(0,1,0,0), 'lines')) +
xlim(0,7) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
plot.margin = unit(c(0,1,0,0), 'lines')),
MortTimePlotHighQ_res + theme(plot.margin = unit(c(0,1,0,0), 'lines')),
InterMortFocal_growth + xlim(0,7) +
theme(plot.margin = unit(c(0,1,0,0), 'lines')),
nrow = 2, ncol = 2, labels = c("A", "C", "B", "D"),
align = "hv")
rm(list = ls()) ##CLEAN EVERYTHING
setwd('U:\\Manuscript\\Bifurcations') ##CHANGE THIS FOLDER TO YOUR OWN LOCATION
source("U:\\Manuscript\\Code_figures\\Functions.R") #Load script#
source("U:\\Manuscript\\Code_figures\\Script_functions_MJ.R") #Load script#
library(ggpubr)
library(ggplot2)
#----------------------------------------------------------------------------------------#
# Result 1: reduced food availability in focal nursery
#----------------------------------------------------------------------------------------#
xlabel = expression(Food ~ productivity ~ focal ~ nursery ~ (mg ~ L^-1 ~ day^-1))
## High quality of focal nursery
xlabel = expression(Mortality ~ rate ~ offshore ~ habitat ~ (day^-1))
MortAdultBif = read.table('AdultMortBif_HighR1max.avg.out', header=F)
GiveNames(MortAdultBif, bif = T, bifname = "bif_par", MinMax = F)
MortAdultBif$Bio_tot = MortAdultBif$Ad_bm + MortAdultBif$Juv_bm
MortAdultBifPlot <- ggplot(data=MortAdultBif, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=14))
#----------------------------------------------------------------------------------------#
# Result 1: reduced food availability in focal nursery
#----------------------------------------------------------------------------------------#
xlabel = expression(Food ~ productivity ~ focal ~ nursery ~ (mg ~ L^-1 ~ day^-1))
FoodFocalBif = read.table('test_R1maxbif.avg.out', header=F)
GiveNames(FoodFocalBif, bif = T, bifname = "bif_par", MinMax = F)
FoodFocalBif$Bio_tot = FoodFocalBif$Ad_bm + FoodFocalBif$Juv_bm
FoodFocalBif$bif_par = 1 - FoodFocalBif$bif_par
FoodFocalBifPlot <- ggplot(data=FoodFocalBif, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=14)) +
scale_x_continuous(breaks = c(0.900, 0.925, 0.950, 0.975, 1.000),
labels = c(0.1, 0.075, 0.05, 0.025, 0))
FoodFocalBifPlot
FoodFocalBifPlot <- ggplot(data=FoodFocalBif, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=18)) +
scale_x_continuous(breaks = c(0.900, 0.925, 0.950, 0.975, 1.000),
labels = c(0.1, 0.075, 0.05, 0.025, 0))
FoodFocalBifPlot
#----------------------------------------------------------------------------------------#
# Result 2: increased mortality in focal nursery
#----------------------------------------------------------------------------------------#
xlabel = expression(Mortality ~ rate ~ focal ~ nursery ~ (day^-1))
MortFocalBif = read.table('FocalMortBif.avg.out', header=F)
GiveNames(MortFocalBif, bif = T, bifname = "bif_par", MinMax = F)
MortFocalBif$Bio_tot = MortFocalBif$Ad_bm + MortFocalBif$Juv_bm
MortFocalBifPlot <- ggplot(data=MortFocalBif, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=18))
MortFocalBifPlot
## High quality of focal nursery
xlabel = expression(Mortality ~ rate ~ offshore ~ habitat ~ (day^-1))
MortAdultBif = read.table('AdultMortBif_HighR1max.avg.out', header=F)
GiveNames(MortAdultBif, bif = T, bifname = "bif_par", MinMax = F)
MortAdultBif$Bio_tot = MortAdultBif$Ad_bm + MortAdultBif$Juv_bm
MortAdultBifPlot <- ggplot(data=MortAdultBif, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=18))
MortAdultBifPlot
## Low quality of focal nursery
MortAdultBif_lowQ = read.table('AdultMortBif_LowR1max.avg.out', header=F)
GiveNames(MortAdultBif_lowQ, bif = T, bifname = "bif_par", MinMax = F)
MortAdultBif_lowQ$Bio_tot = MortAdultBif_lowQ$Ad_bm + MortAdultBif_lowQ$Juv_bm
MortAdultBifPlot_lowQ <- ggplot(data=MortAdultBif_lowQ, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=18))
MortAdultBifPlot_lowQ
#----------------------------------------------------------------------------------------#
# Result 4A: Decreased connectivity to focal nursery with good quality of all habitats
#----------------------------------------------------------------------------------------#
xlabel = "Connectivity to focal nursery"
ConnFigA = read.table('Connectivity_figA.avg.out', header=F)
GiveNames(ConnFigA, bif = T, bifname = "bif_par", MinMax = F)
ConnFigA$Bio_tot = ConnFigA$Ad_bm + ConnFigA$Juv_bm
ConnFigA$bif_par = 1 - ConnFigA$bif_par
ConnFigAPlot <- ggplot(data=ConnFigA, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=18)) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1),
labels = c(1, 0.75, 0.50, 0.25, 0))
ConnFigAPlot
#-----------------------------------------------------------------------------------------------#
# Result 4B: Decreased connectivity to focal nursery with low food productivity in focal nursery
#-----------------------------------------------------------------------------------------------#
xlabel = "Connectivity to focal nursery"
ConnFigB = read.table('Connectivity_figB.avg.out', header=F)
GiveNames(ConnFigB, bif = T, bifname = "bif_par", MinMax = F)
ConnFigB$Bio_tot = ConnFigB$Ad_bm + ConnFigB$Juv_bm
ConnFigB$bif_par = 1 - ConnFigB$bif_par
ConnFigBPlot <- ggplot(data=ConnFigB, aes(bif_par, y=Larv_bm*1000, color='Juveniles')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles', 'Subadults + Adults'),
values = c("Juveniles" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=18)) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1),
labels = c(1, 0.75, 0.50, 0.25, 0))
ConnFigBPlot
#----------------------------------------------------------------------------------------#
# Result 4C: Decreased connectivity to focal nursery with high mortality in focal nursery
#----------------------------------------------------------------------------------------#
xlabel = "Connectivity to focal nursery"
ConnFigC = read.table('Connectivity_figC.avg.out', header=F)
GiveNames(ConnFigC, bif = T, bifname = "bif_par", MinMax = F)
ConnFigC$Bio_tot = ConnFigC$Ad_bm + ConnFigC$Juv_bm
ConnFigC$bif_par = 1 - ConnFigC$bif_par
ConnFigCPlot <- ggplot(data=ConnFigC, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=18)) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1),
labels = c(1, 0.75, 0.50, 0.25, 0))
ConnFigCPlot
#-------------------------------------------------------------------------------------------#
# Result 4D: Decreased connectivity to focal nursery with high mortality in offshore habitat
#-------------------------------------------------------------------------------------------#
xlabel = "Connectivity to focal nursery"
ConnFigD = read.table('Connectivity_figD.avg.out', header=F)
GiveNames(ConnFigD, bif = T, bifname = "bif_par", MinMax = F)
ConnFigD$Bio_tot = ConnFigD$Ad_bm + ConnFigD$Juv_bm
ConnFigD$bif_par = 1 - ConnFigD$bif_par
ConnFigDPlot <- ggplot(data=ConnFigD, aes(bif_par, y=Larv_bm*1000, color='Juveniles in focal nursery')) +
geom_point(aes(y=Bio_tot*1000, color='Subadults + Adults')) +
geom_point() + labs(y = expression(Biomass ~ (mg ~ L^-1)), x = xlabel) + #theme(legend.position="bottom") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
# theme(legend.position = c(0.9, 0.9)) +
theme(legend.key=element_blank()) +
scale_color_manual(breaks = c('Juveniles in focal nursery', 'Subadults + Adults'),
values = c("Juveniles in focal nursery" = "#4B0055", "Subadults + Adults" = "#36E9A7"),
name=NULL) +
guides(color = guide_legend(override.aes = list(size = 3))) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=20),
legend.text=element_text(size=18)) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1),
labels = c(1, 0.75, 0.50, 0.25, 0))
ConnFigDPlot
